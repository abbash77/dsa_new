class DisjointSet{
    vector<int>size,parent;
    public:
    DisjointSet(int n){
        size.resize(n+1,1);
        parent.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i]=i;
        }
    }
    int findPar(int node){
        if(node==parent[node]) return node;
        return parent[node]=findPar(parent[node]);
        
    }
    void unionBySize(int u,int v){
        int ulp_u=findPar(u);
        int ulp_v=findPar(v);
        if(ulp_u==ulp_v) return ;
        if(size[ulp_u]<size[ulp_v]) 
        {
            parent[ulp_u]=ulp_v;
            size[ulp_v]+=size[ulp_u];
        }
        else{
            parent[ulp_v]=ulp_u;
            size[ulp_u]+=size[ulp_v];
        }
    }
};

class Solution {
    
    
    bool isValid(int adjr,int adjc,int n,int m){
        return adjr>=0 && adjr<n && adjc>=0&& adjc<m;
    }
    
  public:
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
     DisjointSet ds(n*m);
     int vis[n][m];
     memset(vis,0,sizeof vis);
     vector<int>ans;
     int cnt=0;
     for(auto it:operators){
         int row=it[0];
         int col=it[1];
         if(vis[row][col]==1) {
             ans.push_back(cnt);
             continue;
         }
         vis[row][col]=1;
         cnt++;
         int dr[]={-1,0,1,0},dc[]={0,1,0,-1};
         for(int i=0;i<4;i++){
             int adjr=row+dr[i];
             int adjc=col+dc[i];
             if(isValid(adjr,adjc,n,m)){
                 if(vis[adjr][adjc]){
                     int nodeNo=row*m+col;
                     int adjNodeNo=adjr*m+adjc;
                     if(ds.findPar(nodeNo)!=ds.findPar(adjNodeNo)){
                         cnt--;
                         ds.unionBySize(nodeNo,adjNodeNo);
                     }
                 }
             }
             
         }
         ans.push_back(cnt);
     }
     
     
     return ans;
    }
};