#include<unordered_map>
#include<list>
bool dfs(unordered_map<int,list<int>> &adj,unordered_map<int,bool>& visited,unordered_map<int,bool>& dfsvisited,int node){
    visited[node]=true;
    dfsvisited[node]=true;
    for(auto i:adj[node]){
        if(!visited[i]){
            bool cycledetected=dfs(adj,visited,dfsvisited,i);
            if(cycledetected){
                return true;
            }
        }
        else if(dfsvisited[i]){
            return true;
        }    
    }
    dfsvisited[node]=false;
    return false;
}
int detectCycleInDirectedGraph(int n, vector < pair < int, int >> & edges) {
  // Write your code here.
    unordered_map<int,list<int>> adj;
    for(int i=0;i<edges.size();i++){
        int u=edges[i].first;
        int v=edges[i].second;
        adj[u].push_back(v);
    }
    unordered_map<int,bool> visited;
    unordered_map<int,bool> dfsvisited;
    for(int i=1;i<=n;i++){
        if(!visited[i]){
            bool cyclefound=dfs(adj,visited,dfsvisited,i);
            if(cyclefound){
                return true;
            }
        }
        
    }
    return false;
    
}