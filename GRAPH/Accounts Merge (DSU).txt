class Disjoint{
    public:
        vector<int> rank;
        vector<int> parent;
        vector<int> size;
        Disjoint(int n){
            rank.resize(n+1,0);
            parent.resize(n+1);
            size.resize(n+1,1);
            for(int i=0;i<=n;i++){
                parent[i]=i;
            }
        }
        int findUPar(int node){
            if(parent[node]==node){
                return node;
            }
            return parent[node]=findUPar(parent[node]);
        }
        void unionByRank(int u, int v) {
            int ulp_u = findUPar(u);
            int ulp_v = findUPar(v);
            if (ulp_u == ulp_v) return;
            if (rank[ulp_u] < rank[ulp_v]) {
                parent[ulp_u] = ulp_v;
            }
            else if (rank[ulp_v] < rank[ulp_u]) {
                parent[ulp_v] = ulp_u;
            }
            else {
                parent[ulp_v] = ulp_u;
                rank[ulp_u]++;
            }
        }
        void unionBySize(int u, int v) {
            int ulp_u = findUPar(u);
            int ulp_v = findUPar(v);
            if (ulp_u == ulp_v) return;
            if (size[ulp_u] < size[ulp_v]) {
                parent[ulp_u] = ulp_v;
                size[ulp_v] += size[ulp_u];
            }
            else {
                parent[ulp_v] = ulp_u;
                size[ulp_u] += size[ulp_v];
            }
        }
};
class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n=accounts.size();
        Disjoint ds(n);
        unordered_map<string,int> m;
        for(int i=0;i<n;i++){
            for(int j=1;j<accounts[i].size();j++){
                if(m.find(accounts[i][j])!=m.end()){
                    ds.unionBySize(m[accounts[i][j]],i);
                }
                else{
                    m[accounts[i][j]]=i;
                }
                
            }
        }
        vector<string> ansPrev[n];
        for(auto i:m){
            int par=ds.findUPar(i.second);
            ansPrev[par].push_back(i.first);
        }
        vector<vector<string>> finalAns;
        for(int i=0;i<n;i++){
            if(ansPrev[i].size()==0)
                continue;
            sort(ansPrev[i].begin(),ansPrev[i].end());
            vector<string> temp;
            temp.push_back(accounts[i][0]);
            for(auto j:ansPrev[i]){
                temp.push_back(j);
            }
            finalAns.push_back(temp);
        }
        return finalAns;
        
    }
};