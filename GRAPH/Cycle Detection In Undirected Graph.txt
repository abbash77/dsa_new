void bfs(unordered_map<int,list<int>>& adjList,unordered_map<int,bool> &visited,string& ans,int node,unordered_map<int,int>& parent){
    queue<int> q;
    q.push(node);
    visited[node]=1;
    parent[node]=-1;
    while(!q.empty()){
        int front=q.front();
        q.pop();
        for(auto i:adjList[front]){
            if(!visited[i]){
                q.push(i);
                visited[i]=1;
                parent[i]=front;
            }
            else if(visited[i]&&parent[front]!=i){
                ans="Yes";
            }
        }
    }
}
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    // Write your code here.
    unordered_map<int,list<int>> adjList;
    unordered_map<int,int> parent;
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adjList[u].push_back(v);
        adjList[v].push_back(u);
    }
     string ans="No";
    unordered_map<int,bool> visited;
    for(int i=0;i<n;i++){//for loop isliye hh ki if nodes are disconnected to koi disconnected node miss ho jayengi
        if(!visited[i]){
            bfs(adjList,visited,ans,i,parent);
        }
        
    }
    return ans;
    
    
}
