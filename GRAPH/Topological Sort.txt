#include<unordered_map>
#include<list>
#include<stack>
void dfs(unordered_map<int,list<int>> &adj,vector<bool>& visited,int node,stack<int>& s){
    visited[node]=true;
    for(auto i:adj[node]){
        if(!visited[i]){
            dfs(adj,visited,i,s);
        } 
    }
    s.push(node);
    
}
vector<int> topologicalSort(vector<vector<int>> &edges, int v, int e)  {
    // Write your code here
     unordered_map<int,list<int>> adj;
    for(int i=0;i<edges.size();i++){
        int u=edges[i][0];
        int v=edges[i][1];
        adj[u].push_back(v);
    }
    stack<int> s;
    vector<bool> visited(v);
    for(int i=0;i<v;i++){
        if(!visited[i]){
            dfs(adj,visited,i,s);
        } 
    }
    vector<int> v1;
    while(!s.empty()){
        v1.push_back(s.top());
        s.pop();
    }
    return v1;
}