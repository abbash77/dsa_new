approach:
First we will replace all the 0s in our array with -1.
Because after our array consists of only 1 and -1, then our problem reduces down to counting length of longest
subarray having sum 0. That is because if a subarray has equal numbers of 1 and -1 only then sum becomes 0.

Count length longest subarray having sum = 0 using hashing and prefix sum.

-----------------------------------------------------------
solution:
-----------------------------------------------------------
int findMaxLength(vector<int>& nums) {
        
        int n = nums.size();
		
		// map stores pairs {a, i} where a = prefix sum of subarray and i = ending index of that subarray
        unordered_map<int,int> mp;
        int pre = 0, res = 0;
        
		// replace 0s with -1
        for(int i = 0; i < n; i++)
            if(nums[i] == 0) nums[i] = -1;
        
        for(int i = 0; i < n; i++){
            pre += nums[i];
			
			// if current subarray has sum 0 then result becomes length of this subarray
            if(pre == 0) res = i+1;
			
			// if this pair is not present already
            if(mp.find(pre) == mp.end()) mp.insert({pre, i});
            
			// result is maximum of previous result and length of this subarray (current index - index of subarray having same prefix sum)
			else res = max(res, i-mp[pre]);
        }
        
		// if no such subarray is found then res will not get updated and it will return 0
        return res;
    }