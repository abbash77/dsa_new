void BSTToDLL(TreeNode<int> *root,TreeNode<int> * &head,TreeNode<int> * &prev){
        if(!root)
          return;
          
        BSTToDLL(root->left,head,prev);
        if(prev)
        {
            prev->right = root;
            root->left = prev;
            prev = prev->right;
        }
        else
        {
             
           prev=root;
           head = prev;
        }
        
        BSTToDLL(root->right,head,prev);
}
TreeNode<int>* mergeSortedDLL(TreeNode<int> *head1,TreeNode<int> *head2){
   if(head1 == NULL){
       return head2;
   }
   if(head2 == NULL){
       return head1;
   }
   TreeNode<int> *head = NULL;
   TreeNode<int> *tail = NULL;
   while(head1!= NULL && head2!=NULL) {
       if(head1->data <head2->data){
           if(head == NULL){
             head = head1;
               tail = head1;
               head1 = head1->right;
           }
           else{
               tail ->right = head1;
               head1->left = tail;
               tail =head1;
               head1 = head1->right;
           }
       }
       else{
           if(head == NULL){
             head = head2;
               tail = head2;
               head2 = head2->right;
           }
           else{
               tail ->right = head2;
               head2->left = tail;
               tail =head2;
               head2 = head2->right;
           }
       }
   }
   while(head1 != NULL){
       tail->right = head1;
       head1->left = tail;
       tail = head1;
       head1=head1->right;
   }
  while(head2 != NULL){
       tail->right = head2;
       head2->left = tail;
       tail = head2;
       head2=head2->right;
   }
   return head;
}
int countNodes(TreeNode<int> * head){
   TreeNode<int> *temp = head;
   int count =0;
   while(temp!=NULL){
       count ++;
       temp=temp->right;
   }
   return count;
}
TreeNode<int>* sortedDLLToBST(TreeNode<int>* &head,int n){
   if(n<=0 || head == NULL){
       return NULL;
   }
   TreeNode<int>* left = sortedDLLToBST(head,n/2);
   TreeNode<int>* root = head;
   root->left = left;
   head = head->right;
   root->right = sortedDLLToBST(head,n-(n/2)-1);
   return root;
}
TreeNode<int> *mergeBST(TreeNode<int> *root1, TreeNode<int> *root2){
   // Write your code here.
    //step 1:convert bst into sorted DLL in place
   TreeNode<int> *head1 = NULL;
    TreeNode<int> *prev1=NULL;
   BSTToDLL(root1,head1,prev1);
   head1->left = NULL;
   TreeNode<int> *head2 = NULL;
    TreeNode<int> *prev2=NULL;
   BSTToDLL(root2,head2,prev2);
   head1->left = NULL;
     //step 2 merge sorted LL
   TreeNode<int>* head = mergeSortedDLL(head1,head2);
   TreeNode<int>* tail = head;
   head->left = NULL;
   int count = countNodes(head);
    //step 3 convert sorted LL into BST
   TreeNode<int>* ansRoot = sortedDLLToBST(head,count);
   return ansRoot;
}