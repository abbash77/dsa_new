class trieNode{
    public:
        char data;
        trieNode* children[26];
        bool isTerminal;
        int childCount;
        trieNode(char ch){
            data =ch;
            for(int i=0;i<26;i++){
                children[i]=NULL;
            }
            childCount=0;
            isTerminal=false;
        }
};
class trie{
    
    public:
        trieNode* root;
        trie(char ch){
            root=new trieNode(ch);
        }
        void insertUtil(trieNode* root,string word){
            //base case
            if(word.length()==0){
                root->isTerminal=true;//last character ko terminal node set kr rhe
                return;
            }
            //assumption word will be in caps
            int index=word[0] - 'a';
            trieNode* child;
            if(root->children[index]!=NULL){//present to bas aage badh jao
                child=root->children[index];
            }
            else{//absent hh to naya bnake aage badh jao
                child=new trieNode(word[0]);
                root->childCount++;
                root->children[index]=child;
            }
            //recursion
            insertUtil(child,word.substr(1));//word ka first character chodke aage badh jao

        }
        void insertWord(string word){
            insertUtil(root,word);
        }
    void lcp(string str,string &ans){
        for(int i=0;i<str.length();i++){
            char ch=str[i];
            if(root->childCount==1){
                ans.push_back(ch);
                int index=ch-'a';
                root=root->children[index];
            }
            else{
                break;
            }
            if(root->isTerminal){
                break;
            }
        }
    }
};
string longestCommonPrefix(vector<string> &arr, int n)
{
    // Write your code here
    trie* t=new trie('\0');
    for(int i=0;i<n;i++){
        t->insertWord(arr[i]);
    }
    string ans="";
    string first=arr[0];
    t->lcp(first,ans);
    return ans;
}