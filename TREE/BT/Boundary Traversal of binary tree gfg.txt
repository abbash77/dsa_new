void printLeftPart(Node* root,vector<int>& ans){
        if(root==NULL){
            return;
        }
        if(root->left==NULL&&root->right==NULL){
            return;
        }
             ans.push_back(root->data);
       if(root->left){
           printLeftPart(root->left,ans);
       }
       else{
           printLeftPart(root->right,ans);
       }
        
    }
    void printLeaf(Node* root,vector<int>& ans){
        if(root==NULL){
            return ;
        }
        if(root->left==NULL&&root->right==NULL){
            ans.push_back(root->data);
            return;
        }
        printLeaf(root->left,ans);
        printLeaf(root->right,ans);
    }
    void printRightPart(Node* root,vector<int> &ans){
        if(root==NULL){
            return;
        }
        if(root->left==NULL&&root->right==NULL){
            return;
        }
        if(root->right){
            printRightPart(root->right,ans);
        }
        else{
            printRightPart(root->left,ans);
        }
        ans.push_back(root->data);
    }
    
public:
    vector <int> boundary(Node *root)
    {
        //Your code here
        vector<int> ans;
        if(root==NULL){
            return ans;
        }
        ans.push_back(root->data);
        //left part traverse
        printLeftPart(root->left,ans);
        
        //left subtree me jo leaf  hh wo
        printLeaf(root->left,ans);
        //right subtree me jo leaf  hh wo
        printLeaf(root->right,ans);
        //traverse right part
        printRightPart(root->right,ans);
        return ans;
        
        
    }