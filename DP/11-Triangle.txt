memoization
------------------------------------------------

int recur(vector<vector<int>>& triangle,int n,int i,int j,vector<vector<int>> &dp){
	if(i==n){
		return triangle[i][j];
	}
	if(dp[i][j]!=-1){
		return dp[i][j];
	}
	int a=recur(triangle,n,i+1,j,dp);
	int b=recur(triangle,n,i+1,j+1,dp);
	return dp[i][j]=triangle[i][j]+min(a,b);
} 
int minimumPathSum(vector<vector<int>>& triangle, int n){
	// Write your code here.
	vector<vector<int>> dp(n,vector<int>(n,-1));
	return recur(triangle,n-1,0,0,dp);
}
----------------------------------------------------
DP
----------------------------------------------------
vector<vector<int>> dp(n,vector<int>(n,0));
	for(int i=0;i<n;i++){
		dp[n-1][i]=triangle[n-1][i];
	}
	for(int i=n-2;i>=0;i--){
		for(int j=0;j<n;j++){
			dp[i][j]=min(dp[i+1][j],dp[i+1][j+1])+triangle[i][j];
		}
	}
	return dp[0][0];
-----------------------------------------------------
space optimisation
-----------------------------------------------------
vector<int> dp(n,0);
	for(int i=0;i<n;i++){
		dp[i]=triangle[n-1][i];
	}
	for(int i=n-2;i>=0;i--){
		vector<int> dummy(n,0);
		for(int j=0;j<n;j++){
			dummy[j]=min(dp[j],dp[j+1])+triangle[i][j];
		}
		dp=dummy;
	}
	return dp[0];