memoization
----------------------------------------------------
int recur(int n,int amount, vector<int>& coins,vector<vector<int>> &dp){
        if(n==0){
            if(amount%coins[0]==0){
                return 1;
            }
            return 0;
        }
        if(dp[n][amount]!=-1){
            return dp[n][amount];
        }
        int notPick=recur(n-1,amount,coins,dp);
        int pick=0;
        if(coins[n]<=amount){
            pick=recur(n,amount-coins[n],coins,dp);
        }
        return dp[n][amount]=pick+notPick;
    }
    int change(int amount, vector<int>& coins) {
        int n=coins.size();
        vector<vector<int>> dp(n,vector<int>(amount+1,-1));
        return recur(n-1,amount,coins,dp);
    }
-------------------------------------------------
DP
-----------------------------------------------
int change(int amount, vector<int>& coins) {
        int n=coins.size();
        vector<vector<int>> dp(n,vector<int>(amount+1,0));
        for(int i=0;i<=amount;i++){
            if(i%coins[0]==0){
                dp[0][i]=1;
            }
            else{
                dp[0][i]=0;
            }
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<=amount;j++){
                int notPick=dp[i-1][j];
                int pick=0;
                if(coins[i]<=j){
                    pick=dp[i][j-coins[i]];
                }
                dp[i][j]=pick+notPick;
            }
        }
        return dp[n-1][amount];
    }
-----------------------------------------------------
space optimisation
-------------------------------------------------------
int change(int T, vector<int>& arr) {
        int n=arr.size();
        // vector<vector<int>> dp(n,vector<int>(amount+1,0));
        vector<long> prev(T+1,0);
    
    
    //Initializing base condition
    for(int i=0;i<=T;i++){
        if(i%arr[0]==0)
            prev[i]=1;
        // Else condition is automatically fulfilled,
        // as prev array is initialized to zero
    }
    
    for(int ind=1; ind<n;ind++){
        vector<long> cur(T+1,0);
        for(int target=0;target<=T;target++){
            long notTaken = prev[target];
            
            long taken = 0;
            if(arr[ind]<=target)
                taken = cur[target-arr[ind]];
                
            cur[target] = notTaken + taken;
        }
        prev = cur;
    }
    
    return prev[T];
    }