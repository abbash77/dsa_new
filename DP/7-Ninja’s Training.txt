memoization
---------------------------------------------------------
int recur(vector<vector<int>> &points,int last,int n,vector<vector<int>>& dp){
    if(n==0){
        int maxi=0;
        for(int i=0;i<3;i++){
            if(i!=last){
                maxi=max(maxi,points[0][i]);
            }
        }
        return maxi;
    }
    if(dp[n][last]!=-1){
        return dp[n][last];
    }
    int a=0;
    for(int i=0;i<3;i++){
        if(i!=last){
            a=max(a,points[n][i]+recur(points,i,n-1,dp));
        }
        
    }
    return dp[n][last]=a;
    
}
int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
    vector<vector<int>> dp( n , vector<int> (4, -1)); 
    return recur(points,3,n-1,dp);
} 
----------------------------------------------
DP
----------------------------------------------
int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<vector<int>> dp( n , vector<int> (4, 0)); 
    
    dp[0][0]=max(points[0][1],points[0][2]);
    dp[0][1]=max(points[0][0],points[0][2]);
    dp[0][2]=max(points[0][0],points[0][1]);
    dp[0][3]=max(points[0][2],max(points[0][0],points[0][1]));
    
    for(int i=1;i<n;i++){
        for(int last=0;last<4;last++){
            dp[i][last]=0;
            for(int task=0;task<3;task++){
                if(task!=last){
                     int p=dp[i-1][task]+points[i][task];
                     dp[i][last]=max(p,dp[i][last]);
                }
            }  
        }
    }
    return dp[n-1][3];
}
-------------------------------------------------------------
space optimisation
-------------------------------------------------------------
int ninjaTraining(int n, vector<vector<int>> &points)
{ 
    vector<int> v(4,0);
    v[0]=max(points[0][1],points[0][2]);
    v[1]=max(points[0][0],points[0][2]);
    v[2]=max(points[0][0],points[0][1]);
    v[3]=max(points[0][2],max(points[0][0],points[0][1]));
    
    for(int i=1;i<n;i++){
        vector<int> temp(4,0);
        for(int last=0;last<4;last++){
            for(int task=0;task<3;task++){
                if(task!=last){
                     temp[last]=max(v[task]+points[i][task],temp[last]);
                }
            }  
        }
        v=temp;
    }
    return v[3];
}





