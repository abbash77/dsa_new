memoization
------------------------------------------------
int recur(int n,int w, vector<int> &profit, vector<int> &weight,vector<vector<int>> &dp){
    if(n==0){
        if(weight[n]<=w){
            return (w/weight[n])*profit[n];
        }
        return 0;
    }
    if(dp[n][w]!=-1){
        return dp[n][w];
    }
    int notPick=recur(n-1,w,profit,weight,dp);
    int pick=INT_MIN;
    if(weight[n]<=w){
        pick=profit[n]+recur(n,w-weight[n],profit,weight,dp);
    }
    return dp[n][w]= max(notPick,pick);
}
int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    // Write Your Code Here.
    vector<vector<int>> dp(n,vector<int>(w+1,-1));
    return recur(n-1,w,profit,weight,dp);
}
-----------------------------------------------------
DP
-----------------------------------------------------
vector<vector<int>> dp(n,vector<int>(w+1,0));
    for(int i=0;i<=w;i++){
        if(weight[0]<=i){
            dp[0][i]= (i/weight[0])*profit[0];
        }
        else{
            dp[0][i]=0;
        }
    }
    for(int i=1;i<n;i++){
        for(int j=1;j<=w;j++){
            int notPick=dp[i-1][j];
            int pick=INT_MIN;
            if(weight[i]<=j){
                pick=profit[i]+dp[i][j-weight[i]];
            }
            dp[i][j]= max(notPick,pick);
        }
    }
    return dp[n-1][w];
------------------------------------------------
space optimisation
-------------------------------------------------------
int unboundedKnapsack(int n, int W, vector<int> &val, vector<int> &wt)
{
    vector<int> cur(W+1,0);
    
    //Base Condition
    
    for(int i=wt[0]; i<=W; i++){
        cur[i] = ((int)i/wt[0]) * val[0];
    }
    
    for(int ind =1; ind<n; ind++){
        for(int cap=0; cap<=W; cap++){
            
            int notTaken = cur[cap];
            
            int taken = INT_MIN;
            if(wt[ind] <= cap)
                taken = val[ind] + cur[cap - wt[ind]];
                
            cur[cap] = max(notTaken, taken);
        }
    }
    
    return cur[W];
}