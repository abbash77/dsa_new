memoization
--------------------------------------------------
int recur(int m,int n,vector<vector<int>> &grid,vector<vector<int>> &dp){
    if(m==0&&n==0){
        return grid[0][0];
    }
    if(m<0||n<0){
        return INT_MAX;
    }
    if(dp[m][n]!=-1){
        return dp[m][n];
    }
    int a=recur(m-1,n,grid,dp);
    int b=recur(m,n-1,grid,dp);
    return dp[m][n]=grid[m][n]+min(a,b);
}
int minSumPath(vector<vector<int>> &grid) {
    // Write your code here.
    int m=grid.size();
    int n=grid[0].size();
    vector<vector<int>> dp(m,vector<int>(n,-1));
    
    return recur(m-1,n-1,grid,dp);
}


--------------------------------------------------
DP
--------------------------------------------------
int m=grid.size();
    int n=grid[0].size();
    vector<vector<int>> dp(m,vector<int>(n,0));
    dp[0][0]=grid[0][0];
    for(int i=0;i<grid.size();i++){
        for(int j=0;j<grid[0].size();j++){
            if(i==0&&j==0){
                continue;
            }
            else{
                int a=INT_MAX;
                int b=INT_MAX;
                if(i-1>=0){
                    a=dp[i-1][j];
                }
                if(j-1>=0){
                    b=dp[i][j-1];
                }
                
                
                dp[i][j]=grid[i][j]+min(a,b);
            }
        }
    }
    return dp[m-1][n-1];
----------------------------------------------------
SPACE OPTIMISATION
----------------------------------------------------
int m=grid.size();
    int n=grid[0].size();
    vector<int> prev(n,-1);
    for(int i=0;i<grid.size();i++){
        vector<int> cur(n,0);
        for(int j=0;j<grid[0].size();j++){
            if(i==0&&j==0){
                cur[0]=grid[0][0];
            }
            else{
                int a=INT_MAX;
                int b=INT_MAX;
                if(i>0){
                    a=prev[j];
                }
                if(j>0){
                    b=cur[j-1];
                }
                cur[j]=grid[i][j]+min(a,b);
            }
        }
        prev=cur;
    }
    return prev[n-1];