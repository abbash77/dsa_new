Frog Jump

Memoization
___________________________________________________________________

int recur(int n,vector<int> &heights,vector<int> &dp){
    if(n==0){
        return 0;
    }
    if(dp[n]!=-1){
        return dp[n];
    }
    int left=recur(n-1,heights,dp)+abs(heights[n]-heights[n-1]);
    int right=INT_MAX;
    if(n>1){
        right=recur(n-2,heights,dp)+abs(heights[n]-heights[n-2]);
    }
    return dp[n]=min(left,right);
}
int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    vector<int> dp(n+1,-1);
    return recur(n-1,heights,dp);
}

Tabular
______________________________________________________________________
int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    vector<int> dp(n+1,0);
    dp[0]=0;
    for(int i=1;i<=n-1;i++){
        int left=dp[i-1]+abs(heights[i]-heights[i-1]);
        int right=INT_MAX;
        if(i>1){
            right=dp[i-2]+abs(heights[i]-heights[i-2]);
        }
        dp[i]=min(left,right);
    }
    return dp[n-1];
}

Tabular with space optimisation
________________________________________________

int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    int prev=0;
    int prev2=0;
    for(int i=1;i<=n-1;i++){
        int left=prev+abs(heights[i]-heights[i-1]);
        int right=INT_MAX;
        if(i>1){
            right=prev2+abs(heights[i]-heights[i-2]);
        }
        int curr=min(left,right);
        prev2=prev;
        prev=curr;
    }
    return prev;
}