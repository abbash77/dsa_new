memoization
--------------------------------------------------------
int recur(int n1,int n2,string s, string t,vector<vector<int>> &dp){
        if(n2<0){
            return 1;
        }
        if(n1<0){
            return 0;
        }
        if(dp[n1][n2]!=-1){
            return dp[n1][n2];
        }
        if(s[n1]==t[n2]){
            return dp[n1][n2]= recur(n1-1,n2,s,t,dp)+recur(n1-1,n2-1,s,t,dp);
        }
        return dp[n1][n2]= recur(n1-1,n2,s,t,dp);
    }
    int numDistinct(string s, string t) {
        int n1=s.length();
        int n2=t.length();
        vector<vector<int>> dp(n1+1,vector<int>(n2+1,-1));
        return recur(n1-1,n2-1,s,t,dp);
    }
--------------------------------------------------------
DP
--------------------------------------------------------
int numDistinct(string s, string t) {
        int n1=s.length();
        int n2=t.length();
        vector<vector<int>> dp(n1+1,vector<int>(n2+1,0));
        for(int i=0;i<=n1;i++){
            dp[i][0]=1;
        }
        for(int i=1;i<=n1;i++){
            for(int j=1;j<=n2;j++){
                if(s[i-1]==t[j-1]){
                    dp[i][j]= (dp[i-1][j]+dp[i-1][j-1])%MOD;
                }
                else{
                    dp[i][j]= dp[i-1][j];
                }
            }
        }
        return dp[n1][n2];
    }
---------------------------------------------------------
Space optimisation
---------------------------------------------------------
int MOD=1e9+7;
    int numDistinct(string s, string t) {
        int n1=s.length();
        int n2=t.length();
        vector<vector<int>> dp(n1+1,vector<int>(n2+1,0));
        vector<int> prev(n2+1,0);
        vector<int> curr(n2+1,0);
        
        curr[0]=prev[0]=1;
        for(int i=1;i<=n1;i++){
            for(int j=1;j<=n2;j++){
                if(s[i-1]==t[j-1]){
                    curr[j]= (prev[j]+prev[j-1])%MOD;
                }
                else{
                    curr[j]= prev[j];
                }
            }
            prev=curr;
        }
        return prev[n2];
    }