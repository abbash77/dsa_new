memoization
------------------------------------------------
int recur(int n,int k,vector<int> arr,vector<vector<int>> &dp){
    if(k==0){
        return true;
    }
    if(n==0){
        return arr[n]==k;
    }
    if(dp[n][k]!=-1){
        return dp[n][k];
    }
    bool notPick=recur(n-1,k,arr,dp);
    bool pick=false;
    if(k>=arr[n]){
        pick=recur(n-1,k-arr[n],arr,dp);
    }
    return dp[n][k]=pick||notPick;
}
bool subsetSumToK(int n, int k, vector<int> &arr) {
    // Write your code here.
    vector<vector<int>> dp(n+1,vector<int>(k+1,-1));
    return recur(n-1,k,arr,dp);
}
---------------------------------------------------
DP
-----------------------------------------------------
vector<vector<bool>> dp(n,vector<bool>(k+1,false));
    for(int i=0; i<n; i++){
        dp[i][0] = true;
    }
    if(arr[0]<=k)
        dp[0][arr[0]] = true;
    for(int ind = 1; ind<n; ind++){
        for(int target= 1; target<=k; target++){
            bool notTaken = dp[ind-1][target];
            bool taken = false;
                if(arr[ind]<=target)
                    taken = dp[ind-1][target-arr[ind]];
            dp[ind][target]= notTaken||taken;
        }
    }
    return dp[n-1][k];
-------------------------------------------------------
space optimisation
-------------------------------------------------------
vector<bool> dp(k+1,false);    
    if(arr[0]<=k)
        dp[arr[0]] = true;
    for(int ind = 1; ind<n; ind++){
        vector<bool> dummy(k+1,false);
        for(int target= 1; target<=k; target++){
            bool notTaken = dp[target];
            bool taken = false;
                if(arr[ind]<=target)
                if(target-arr[ind]==0){
                    taken=true;
                }
                else{
                    taken = dp[target-arr[ind]];
                }
            dummy[target]= notTaken||taken;
        }
        dp=dummy;
    }
    return dp[k];