space optimisation
--------------------------------------------------

int countPartitions(int n, int d, vector<int> &num) {
    int totSum = 0;
    for(int i=0; i<n;i++){
        totSum += num[i];
    }
    
    //Checking for edge cases
    if(totSum-d <0 || (totSum-d)%2 ) return 0;
    
    int tar=(totSum-d)/2;

    vector<int> dp(tar+1,0);
    
    if(num[0] == 0) dp[0] =2;  // 2 cases -pick and not pick
    else dp[0] = 1;  // 1 case - not pick
    
    if(num[0]!=0 && num[0]<=tar) dp[num[0]] = 1;  // 1 case -pick
    
    for(int ind = 1; ind<n; ind++){
        vector<int> cur(tar+1,0);
        for(int target= 0; target<=tar; target++){
            int notTaken = dp[target];
    
            int taken = 0;
                if(num[ind]<=target)
                    taken = dp[target-num[ind]];
        
            cur[target]= (notTaken + taken);
        }
        dp = cur;
    }
    return dp[tar];

}
    int findTargetSumWays(vector<int>& nums, int target) {
        int n=nums.size();
        return countPartitions(n,target,nums);
    }
};