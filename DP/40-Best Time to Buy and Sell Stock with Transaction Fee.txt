memoization
----------------------------------------------------------
int recur(int i,int buy,int k,vector<int>& prices,vector<vector<int>> &dp){
        if(i==prices.size()){
            return 0;
        }
        if(dp[i][buy]!=-1){
            return dp[i][buy];
        }
        if(buy){
            int a=-prices[i]-k+recur(i+1,0,k,prices,dp);
            int b=recur(i+1,1,k,prices,dp);
            return dp[i][buy]= max(a,b);
        }
        else{
            int a=prices[i]+recur(i+1,1,k,prices,dp);
            int b=recur(i+1,0,k,prices,dp);
            return dp[i][buy]= max(a,b);
        }
    }
    int maxProfit(vector<int>& prices, int k) {
        int n=prices.size();
        vector<vector<int>> dp(n,vector<int>(2,-1));
        
        return recur(0,1,k,prices,dp);
    }
-------------------------------------------------------
DP
-------------------------------------------------------
int maxProfit(vector<int>& prices, int k) {
        int n=prices.size();
        vector<vector<int>> dp(n+1,vector<int>(2,0));
        dp[n][0]=dp[n][1]=0;
        for(int i=n-1;i>=0;i--){
            for(int j=0;j<2;j++){
                if(j){
                    int a=-k-prices[i]+dp[i+1][0];
                    int b=dp[i+1][1];
                    dp[i][j]= max(a,b);
                }
                else{
                    int a=prices[i]+dp[i+1][1];
                    int b=dp[i+1][0];
                    dp[i][j]= max(a,b);
                }
            }
        }
        return dp[0][1];
    }
----------------------------------------------------
space
-------------------------------------------------------
