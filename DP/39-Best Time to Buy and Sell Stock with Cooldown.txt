memoization
------------------------------------------------------
int recur(int i,int buy,vector<int>& prices,vector<vector<int>> &dp){
        if(i>=prices.size()){
            return 0;
        }
       if(dp[i][buy]!=-1){
           return dp[i][buy];
       }
     
        if(buy){
            int a=-prices[i]+recur(i+1,0,prices,dp);
            int b=recur(i+1,1,prices,dp);
            return dp[i][buy]= max(a,b);
        }
        else{
            int a=prices[i]+recur(i+2,1,prices,dp);
            int b=recur(i+1,0,prices,dp);
            return dp[i][buy]= max(a,b);
        }
    }
    int maxProfit(vector<int>& prices) {
        int n=prices.size();
        vector<vector<int>> dp(n,vector<int>(2,-1));
        return recur(0,1,prices,dp);
    }
------------------------------------------------------

DP
--------------------------------------------------------
int stockProfit(vector<int> &Arr)
{
    int n = Arr.size();
    vector<vector<int>> dp(n+2,vector<int>(2,0));
    
    for(int ind = n-1; ind>=0; ind--){
        for(int buy=0; buy<=1; buy++){
            int profit;
            
            if(buy==0){// We can buy the stock
                profit = max(0+dp[ind+1][0], -Arr[ind] + dp[ind+1][1]);
            }
    
            if(buy==1){// We can sell the stock
                profit = max(0+dp[ind+1][1], Arr[ind] + dp[ind+2][0]);
            }
            
            dp[ind][buy] = profit;
        }
    }
    
    return dp[0][0];
}
----------------------------------------------------
space
----------------------------------------------------
int stockProfit(vector<int> &Arr)
{
    int n = Arr.size();
    vector<int> cur(2,0);
    vector<int> front1(2,0);
    vector<int> front2(2,0);
    
    for(int ind = n-1; ind>=0; ind--){
        for(int buy=0; buy<=1; buy++){
            int profit;
            
            if(buy==0){// We can buy the stock
                profit = max(0+front1[0], -Arr[ind] + front1[1]);
            }
    
            if(buy==1){// We can sell the stock
                profit = max(0+front1[1], Arr[ind] + front2[0]);
            }
            
            cur[buy] = profit;
        }
        
        front2 = front1;
        front1 = cur;
        
    }
    
    return cur[0];
}
